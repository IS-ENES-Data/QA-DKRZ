#! /bin/bash

descript()
{
  echo -e "\nUsage: dkrz-cf-checker [opts] netCDF-file[s]"
  echo "Purpose: Check for CF Conventions Compliance (http://cfconventions.org)."
  echo "The checker is part of the QA-DKRZ package in"
  echo "https://github.com/IS-ENES-Data/QA-DKRZ.git"
  echo "Compilation: '/your-path-to-QA-DKRZ/install CF' unless"
  echo "it was fetched by conda install -c birdhouse qa-dkrz,"
  echo "Email: hollweg@dkrz.de"
  echo " -C str     CF Convention string; taken from global attributes by default."
  echo " -F path    Find recursively all nc-files from starting point 'path'."
  echo " -p str     Path to one or more netCDF Files; this is prefixed"
  echo "            only to netCDF-files without any path component."
  echo " --debug    Show execution commands."
  echo " -h, --help"
  echo " --no-reco  No recommendations given by CF conventions."
  echo " --param    Only for program development."
  echo " --ts[=arg] Run the files provided in the Test-Suite for CF conventions"
  echo "            rules in QA-DKRZ/CF_TestSuite. If particular netCDF files are"
  echo "            provided additionally, then only these are used. If a filename"
  echo "            cannot be resolved unambigously, then use optional arg F[ail] or P[ass}."
  echo " netCDF-file(s)"

  exit
}

checkInstallation()
{
  if ! . ${QA_SRC}/scripts/getConfigFile ] ; then
    ${QA_SRC}/install CF
  fi

  # sets: QA_TABLES, CONFIG_FILE
  if [ -f ${QA_SRC}/.qa-config.txt ] ; then
     # is it frozen?
     export CONFIG_FILE=${QA_SRC}/.qa-config.txt
     . ${QA_SRC}/scripts/getTablesPath
     return
  elif [ -f ~/.qa-dkrz/config.txt ] ; then
     export CONFIG_FILE=~/.qa-dkrz/config.txt
     . ${QA_SRC}/scripts/getTablesPath
  fi

  if ! . $QA_SRC/scripts/inqRunEnv --read-only CF ; then
      # get the state of the current installation: read config-file
        local installArg="--install=force${prj:+,${prj}}"

        echo -e "\nMissing external tables/executables."
        prg=${0%/*}
        prg=${prg%/*}/install
        echo "Please, run: $prg --up CF"
        exit 1
  fi

  return
}

getSrcPath()
{
   local i items p
   declare -a items

   p=$0

   while [ -h $p ] ; do
      # resolve symbolic links: cumbersome but robust,
      items=( $(ls -l $p) )
      i=$((${#items[*]}-1))
      p=${items[i]}
   done

   # only the directory
   p=${p%/*}

   # resolve relative path
   if [ ${p:0:1} != '/' ] ; then
     cd $p &> /dev/null
     p=$(pwd)
     cd - &> /dev/null
   fi

   export QA_SRC=$p

   return
}

# -------  main -----
if tty -s ; then TTY=$(tty) ; fi

test $# -eq 0 && descript

# resolve symbolic links and relative paths
getSrcPath
test ${QA_SRC##*/} = scripts && QA_SRC=${QA_SRC%/scripts}

# process recommendations
RC=t

while getopts C:F:hp:R-: option ${args[*]}
do
  case $option in
    C)  CF=${OPTARG} ;;
    F)  startingDir=$OPTARG ;;
    h)  descript ;;
    p)  fPath=${OPTARG} ;;
    R)   ;;  # for backward compatibility
    -)  if [ "$OPTARG" = "help" ] ; then
          descript
        elif [ "${OPTARG}" = "debug" ] ; then
          set -x
        elif [ "${OPTARG}" = "no-reco" ] ; then
          RC=f
        elif [ "${OPTARG%%=*}" = "note" ] ; then
           NOTE="${NOTE}${NOTE:+,}"
           OPTVAL=${OPTARG#*=}
           if [ ${OPTVAL:0:1} = '{' ] ; then
             NOTE="${NOTE}${NOTE:+,}${OPTVAL}"
           else
             NOTE="${NOTE}${NOTE:+,}{${OPTVAL}}"
           fi
        elif [ "${OPTARG}" = "param" ] ; then
          isParamFileOnly=t
        elif [ "${OPTARG}" = "test-suite" ] ; then
          isTestSuite=t
        elif [ "${OPTARG%=*}" = "ts" ] ; then
          if [ "${OPTARG%=*}" != "${OPTARG}" ] ; then
            arg=${OPTARG#*=}
            if [ ${arg[0]} = p -o ${arg[0]} = P ] ; then
              tsCase=/Pass
            else
              tsCase=/Fail
            fi
          fi
          isTestSuite=t
        fi
        ;;
   \?)  descript
  esac
done

shift $(( $OPTIND - 1 ))

checkInstallation

# files
fs=( $* )

if [ ${isTestSuite:-f} = t ] ; then
  ts_cmd_fs=($*)

  # generate the netcdf files
  count=$(find $QA_SRC/CF-TestSuite/Nc -name "*.nc" 2> /dev/null | grep -c .)
  if [ ${count} -lt 25 ] ; then  # sufficient to outnumber protected nc-files
    if [ ! -f $QA_SRC/CF-TestSuite/Txt ] ; then
      if [ -f $QA_SRC/CF-TestSuite/Txt.tar.bz2 ] ; then
        tar -C   ${QA_SRC}/CF-TestSuite \
            -xjf ${QA_SRC}/CF-TestSuite/Txt.tar.bz2
      else
        echo "$QA_SRC/CF-TestSuite/Txt no such directory"
        exit 1
      fi
    fi

    if [ -d $QA_SRC/CF-TestSuite/Txt ] ; then
      $QA_SRC/CF-TestSuite/scripts/mkAllNc > /dev/null
    else
      echo "$QA_SRC/CF-TestSuite/Txt no such directory"
      exit 1
    fi
  fi

  startingDir=$QA_SRC/CF-TestSuite/Nc${tsCase}

  ts_fs=( $( find ${startingDir} -name "*.cn" ) )
  ts_fs=( ${ts_fs[*]} $( find ${startingDir} -name "*.nc" | sort ) )

  unset startingDir
fi

# not for the test suite
if [ ${#startingDir} -gt 0 ] ; then
  fs_found=( $( find ${startingDir} -name "*.nc" | sort ) )

  # if files given by parameter, then check whether these are among fs_found. If
  # yes, then proceed only with them.
  for(( i0=0 ; i <${#fs[*]} ; ++i )) ; do
    for ff1 in ${fs_found[*]} ; do
      if [ ${fs[i]##*/} = ${ff1##*/} ] ; then
         fs_fnd2[${#fs_fnd2[*]}]=$ff1
          unset fs[i0]
      fi
    done
  done

  if [ ${#fs_fnd2[*]} -gt 0 ] ; then
    fs=( ${fs[*]} ${fs_fnd2[*]} )
  else
    fs=( ${fs[*]} ${fs_found[*]} )
  fi
elif [ ${#ts_fs[*]} -gt 0 ] ; then
  fs=(${ts_fs[*]})  # the test-suite files
fi

param_T="\\n-t ${QA_TABLES}/tables/projects/CF"

param_IN="\\nIN::oCF"

param_CF="\\nCF::cFSN=cf-standard-name-table.xml"
param_CF="${param_CF}:cFAT=cf-area-type-table.txt"
param_CF="${param_CF}:cFSRN=cf-standardized-region-list.txt"
param_CF="${param_CF}${CF:+:cF=}${CF}${RC:+:fR}"

param_X="${param_X}\\nX::cL=CF_check-list.conf:nCR:nLL=L1:oP:d"
if [ ${NOTE} ] ; then
   param_X="${param_X}:note=${NOTE}"
fi
#param_X="${param_X}:note={CF_12h,D}"  # data variable without any data


if [ ${isParamFileOnly:-f} = f ] ; then
  echo -e "\n========================================"
  echo -e "\nDKRZ-CF-Checker run ($(date +'%F %T')):"
fi

for(( i=0 ; i < ${#fs[*]} ; ++i )) ; do
  f=${fs[i]}

  if [ ! -f $f ] ; then
    echo "${f}: no such file"
    continue
  fi

  fPath=${f%/*}
  f=${f##*/}
  test "${fPath}" = "${f}" && fPath=$(pwd)

  # only selected ones from the set of test files
  if [ ${#ts_cmd_fs[*]} -gt 0 ] ; then
    for(( i_ts=0 ; i_ts < ${#ts_cmd_fs[*]} ; ++i_ts )) ; do
      test ${f} = ${ts_cmd_fs[i_ts]} && break
    done
    test ${i_ts} -eq ${#ts_cmd_fs[*]} && continue
  fi

  param=

  if [ "$fPath" ] ; then
    param="-p ${fPath}\\n"
  else
    echo "Please, provide a path with opt -p"
    exit 1
  fi

  param="${param}-f $f"
  param="${param}${param_T}"
  param="${param}${param_IN}"
  param="${param}${param_CF}"

  param="${param}${param_X}"
  if [ ${isTestSuite:-f} = t ] ; then
    if [ ${f##*/} != cf_0f.nc ] ; then
      param="${param}:note={CF_0d,D},{CF_0e,D},{CF_0f,D},{CF_12e,D}"
    fi
  fi

  if [ ${isParamFileOnly:-f} = t ] ; then
    echo -e "$param" > param_file.txt
    exit
  fi

  param="$(echo -e $param)"
  $QA_SRC/bin/dkrz-cf-checker.x ${param}
  retVal=$?

  if [ ${isTestSuite:-f} = t ] && echo $f | grep -q Fail ; then
    asdf="$(ncdump -h $f | grep :comment[^[:digit:]])"
    echo "${asdf#*:}"
#    asdf="$(ncdump -h $f | grep :note)"
#    test "${asdf}" && echo -e "${asdf#*:}"
    echo -e "\n"
  fi
done

echo "========================================"

test -e param_file_$$.txt && \rm param_file_$$.txt

exit $retVal
