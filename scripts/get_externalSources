WGET_TOUT=60

cf()
{
  test ! ${isUpTables} && return 1

  if ! mkdir -p $QA_TABLES/tables/projects/CF ; then
     mkdir -p $1
     return 41
  fi
  cd $QA_TABLES/tables/projects/CF

  # htmnl page containing access to cf related tables
  local org=http://cfconventions.org
  local html=standard-names.html

  # purpose: contains links and version data to the latest xml tables
  if ! cf_html ; then
     # already up2date
     return 0
  fi

  local last now
  local status=0
  local retVal=0

  if ! get_xml $cf_STANDARD_NAME_TABLE ; then
     retVal=1
  fi

  if ! get_xml $cf_REGION_LIST_TABLE ; then
     retVal=1
  fi

  if ! get_xml $cf_AREA_TYPE_TABLE ; then
     retVal=1
  fi

  return $retVal
}

cf_html()
{
  local last now
  local status=0

  # html page contains access to cf related tables

  checkDate init $html

  wget --timeout=$WGET_TOUT -q -N $org/$html

  if [ ! -f $html ] ; then
    err[${#err[*]}]="failed wget -N $org/$html"
    return 41
  fi

  if ! checkDate $html ; then
     return 1
  fi

  # get version and date

  # current links to latest xml versions
  cf_STANDARD_NAME_TABLE="$(grep -m 1 cf-standard-name-table.xml $html)"
  cf_STANDARD_NAME_TABLE="${cf_STANDARD_NAME_TABLE%\"*}"
  cf_STANDARD_NAME_TABLE="${cf_STANDARD_NAME_TABLE#*\"}"

  cf_AREA_TYPE_TABLE="$(grep -m 1 area-type-table.xml $html)"
  cf_AREA_TYPE_TABLE="${cf_AREA_TYPE_TABLE%\"*}"
  cf_AREA_TYPE_TABLE="${cf_AREA_TYPE_TABLE#*\"}"

  cf_REGION_LIST_TABLE="$(grep -m 1 standardized-region-list.xml $html)"
  cf_REGION_LIST_TABLE="${cf_REGION_LIST_TABLE%\"*}"
  cf_REGION_LIST_TABLE="${cf_REGION_LIST_TABLE#*\"}"

  # get versions
  local v=

  local i v_str g_str t_str
  declare -a v_str g_str t_str

  g_str[0]='Standard Name Table'
  g_str[1]='Standardized Region List'
  g_str[2]='Area Type Table'

  t_str[0]='std-name='
  t_str[1]='region='
  t_str[2]='area='

  for(( i=0 ; i < ${#g_str[*]} ; ++i )) ; do
    v_str=()
    v_str="$(grep "${g_str[i]}"' (.*)' $html)"
    v_str="${v_str#*\(}"
    v_str=(${v_str%)*})
    v_str[2]="${v_str[2]:0:3}."
    v_str="${v_str[*]}"
    v_str=${v_str// /}

    v="${v}${v:+,}${t_str[i]}${v_str}"
  done

  . $QA_SRC/scripts/parseConfigFile CF_STD_NAME_VERSION=$v

  return 0
}

convert_xml2txt()
{
  local xmlFile=$1
  local txtFile=cf-${1%xml}txt

  if [ -f ${txtFile} ] ; then
    local h_date=$(ls -l --time-style='+%Y%m%d' ${xmlFile} | awk '{print $6}')
    local t_date=$(ls -l --time-style='+%Y%m%d' ${txtFile} | awk '{print $6}')

    test $h_date -lt $t_date && return 0
  fi

  # convert plain xml to text

  rm -f ${txtFile}
  local txt
  while read line ; do
    for(( i=0 ; i < ${#line} ; ++i )) ; do
      # rm leading blanks
      test "${line:i:1}" = ' ' && continue

      if [ "${line/entry id/}" != "${line}" ] ; then
        line=${line#*=}
        line=${line:1:$((${#line}-3))}
        echo "${line}" >> $txtFile

        continue 2
      fi

      break  #get next line
    done
  done < $xmlFile

  return 0
}

get_xml()
{
  local table="$1"

  if [ ${#table} -gt 0 ] ; then
    if ! wget --timeout=$WGET_TOUT -q -N $org/$table ; then
      err[${#err[*]}]="failed wget -q -N $org/$table"
      return 41
    fi
  fi

  # xml is parsed by the c++ executable
  test "${1##*/}" = cf-standard-name-table.xml && return 0

  convert_xml2txt ${table##*/}

  return $?
}

checkDate()
{
   if [ $1 = init ] ; then
     currFile[${#currFile[*]}]=$2
     last[${#last[*]}]=0

     if [ -f $2 ] ; then
       last=$( ls -l --time-style='+%s' $2 | awk '{print $6}' )
     fi

     return 1
   fi

   # find index of currFile for $1, i.e. the filename
   local i
   for(( i=0 ; i < ${#currFile[*]} ; ++i )) ; do
     test $1 = ${currFile[i]} && break
   done

   local now
   now=$( ls -l --time-style='+%s' ${currFile[i]} | awk '{print $6}' )
   test ${now} -gt ${last[i]}  && return 0

   return 1
}

cmip6()
{
   test ! ${w_perm} && return 1

   local status=0
   local isCMIP6=t

   if [ ! ${XLSX2CSV} ] || [ ! -f "${XLSX2CSV}" ] ; then
     if ! xlsx2csv ; then
        status=$?
     fi
   fi

   if ! mkdir -p $QA_TABLES/tables/projects/$prj ; then
     mkdir -p $1
     return 41
   fi
   cd $QA_TABLES/tables/projects/$prj &> /dev/null

   if ! cmip6_tables_I ; then
      status=$?
   fi

   if ! cmip6_cmor ; then
      status=$?
   fi

   if ! cmip6_tables_II ; then
     status=$?
   fi

   return $status
}

cmip6_tables_II()
{
   test ! ${isUpTables} && return 1

   # Clone the CMIP6 table to your working directory.
   # Disable SSL verification (firewall only).

   if [ -d ${QA_TABLES}/tables/projects/CMIP6/cmip6-cmor-tables ] ; then
     #look for an update
     cd ${QA_TABLES}/tables/projects/CMIP6/cmip6-cmor-tables &> /dev/null

     local remote
     declare -a remote
     remote=( $( git remote -v ) )
     if [ ${remote[1]##*/} = 'cmip6-cmor-tables.git' ] ; then
       git fetch &> log_cmip6-cmor-tables.txt \
       && git reset --hard origin/master &> log_cmip6-cmor-tables.txt
     fi
   elif [ -d ${QA_TABLES}/tables/projects/CMIP6 ] ; then
     cd ${QA_TABLES}/tables/projects/CMIP6 &> /dev/null

     git clone https://github.com/PCMDI/cmip6-cmor-tables.git &> log_cmip6-cmor-tables.txt
   fi

   local status=$?

   if [ $status -gt 0 ] ; then
     cat log_cmip6-cmor-tables.txt # > ${TTY}
   fi

   return $status
}

cmip6_cmor()
{
  test ! ${isUpCmorConda} && return 1

  local conda_env cmp
  local action isNewConda

  if [ ${CONDA_PATH_CMOR} ] ; then
     test ! -e ${CONDA_PATH_CMOR} && CONDA_PATH_CMOR=  # this is no typo
  fi

  if [ ${CONDA_PATH_CMOR} ] && [ -d ${CONDA_PATH_QA%/bin/conda}/envs/cmor ] ; then
      CONDA_PATH_CMOR=${CONDA_PATH_QA}
      . $QA_SRC/scripts/parseConfigFile CONDA_PATH_CMOR=${CONDA_PATH_CMOR}
  fi

  if [ ${CONDA_CMOR_ENV} ] && [ ${PrePARE} ] ; then
     action=update
  fi

  if [ ! ${action} ] ; then
    if [ ${CONDA_PATH_CMOR} ] ; then
      cmp=${CONDA_PATH_CMOR%/bin/conda}
      if [ -d $cmp/envs/cmor ] ; then
         CONDA_CMOR_ENV=$cmp/envs/cmor
         . $QA_SRC/scripts/parseConfigFile CONDA_CMOR_ENV=${CONDA_CMOR_ENV}

         if [ -f $CONDA_CMOR_ENV/bin/PrePARE ] ; then
            PrePARE=$CONDA_CMOR_ENV/bin/PrePARE
           . $QA_SRC/scripts/parseConfigFile PrePARE=${PrePARE}
         fi
      fi
    else
       # try other sections of the configuration file for matches
       local prep
       declare -a prep
       prep=( $( grep PrePARE= ${CONFIG_FILE} ) )
       prep=${prep[0]#PrePARE=}
       if [ ${#prep} -gt 0 ] ; then
          if [ -f "${prep}" ] ; then
             . $QA_SRC/scripts/parseConfigFile PrePARE=${prep}
             PrePARE=${prep}
          fi

          local cce=${PrePARE%/bin/PrePARE}
          if [ -d $cce ] ; then
             . $QA_SRC/scripts/parseConfigFile CONDA_CMOR_ENV=${cce}
             CONDA_CMOR_ENV=$cce
          fi

          local cp=${CONDA_CMOR_ENV%/envs/cmor}/bin/conda
          if [ -f $cp ] ; then
             . $QA_SRC/scripts/parseConfigFile CONDA_PATH_CMOR=${cp}
             CONDA_PATH_CMOR=$cp
          fi
       fi
    fi
  fi

  if [ ${CONDA_PATH_CMOR} ] ; then
    if [ ! ${CONDA_CMOR_ENV} ] ; then
      cmp=${CONDA_PATH_CMOR%/bin/conda}/envs/cmor

      if [ -d $cmp ] ; then
         CONDA_CMOR_ENV=$cmp
         . $QA_SRC/scripts/parseConfigFile CONDA_CMOR_ENV=${cmp}
      fi
    fi

    if [ ! ${PrePARE} ] ; then
         test -f $CONDA_CMOR_ENV/bin/PrePARE && \
             PrePARE=$CONDA_CMOR_ENV/bin/PrePARE
    fi

    if [ ! ${UDUNITS2_XML_PATH} ] && [ ${CONDA_CMOR_ENV} ] ; then
        local uxp
        declare -a uxp

        uxp=( $( find $CONDA_CMOR_ENV -name "udunits2.xml" 2> /dev/null ) )

        if [ -f ${uxp[0]} ] ; then
           test ${uxp[0]:0:2} = './' && uxp[0]=${PWD}/${uxp[0]:2}
           UDUNITS2_XML_PATH=${uxp[0]}

           . ${QA_SRC}/scripts/parseConfigFile UDUNITS2_XML_PATH=${uxp[0]}
        fi
    fi
  fi

  if [ ${PrePARE} ] ; then
     action=update
  else
     action=create
  fi

  if [ ! ${CONDA_PATH_CMOR} ] ; then
     local prompt_text
     echo -e "\nCMIP6 requires conda for running CMOR; ~5GB." # > ${TTY}

     prompt_text=" <yes: path where to install, [cancel]>: "
     local p_quest

     while : ; do
       read -p "${prompt_text}"  quest # 2> ${TTY}

       case ${p_quest:0:1} in
         ( c |  '') exit 41  ;;
         *) if [ ${p_quest:0:1} != '/' ] ; then
              echo "Please, provide absolute path" # > ${TTY}
              continue
            fi
            ;;
       esac

       echo ''  # just for a newline
       break
     done

     if [ ${p_quest} ] ; then
       if make_miniconda ${p_quest} ; then
         CONDA_PATH_CMOR=${CONDA_PATH_CMOR}/miniconda2/bin/conda
         . $QA_SRC/scripts/parseConfigFile CONDA_PATH_CMOR=${CONDA_PATH_CMOR}
         CONDA_CMOR_ENV=${CONDA_PATH_CMOR%/bin/conda}/envs/cmor
       fi
     fi
  fi

  if [ ${CONDA_PATH_CMOR} ] ; then
    if update_CONDA_env "${CONDA_CMOR_NAME}" "${CONDA_CMOR_CHANNELS}" \
          "${CONDA_PATH_CMOR}" ${conda_env:-cmor} ${action} ; then

      . $QA_SRC/scripts/parseConfigFile CONDA_CMOR_ENV=${CONDA_CMOR_ENV}
      return 0
    fi
  fi

  return 41
}

cmip6_tables_I()
{
   test ! ${isUpTables} && return 1
   local last now

   mkdir -p ${QA_TABLES}/tables/projects/CMIP6
   cd ${QA_TABLES}/tables/projects/CMIP6 &> /dev/null

   checkDate init CMIP6_MIP_tables.xlsx

   wget --timeout=${WGET_TOUT} -l1 -N -np  \
      http://proj.badc.rl.ac.uk/svn/exarch/CMIP6dreq/tags/latest/dreqPy/docs/CMIP6_MIP_tables.xlsx \
      >> log_cmip6_tables_II.txt 2>&1

   if [ $? -gt 0 ] ; then
      err[${#err[*]}]="wget CMIP6_MIP_tables.xlsx from http://proj.badc.rl.ac.uk"
      cd - &> /dev/null
      return 41
   fi

   if checkDate CMIP6_MIP_tables.xlsx ; then
     echo "CMIP6 - last update:" > README.txt
     echo "  CMIP6_MIP_tables.xlsx: $( date +'%F %T' )" > README.txt

     # location of extracted csv table sheets: [QA_TABLES/tables/projects/CMIP6]
     ${XLSX2CSV} -a -d '|' -l '\n' CMIP6_MIP_tables.xlsx CMIP6_MIP_tables
   fi

   # the CMIP6 json files
   if [ -d CMIP6_CVs ] ; then
     cd CMIP6_CVs

     if [ "$(getGitBranch)" != master ] ; then
       git checkout master &> /dev/null
     fi

     git fetch && git reset --hard origin/master >> log_cmip6_tables_II.txt 2>&1
   else
     git clone https://github.com/WCRP-CMIP/CMIP6_CVs >> log_cmip6_tables_II.txt 2>&1
   fi

   local status=$?

   if [ $status -gt 0 ] ; then
      err[${#err[*]}]="git failed for CMIP6_CVs from https://github.com/WCRP-CMIP"
   fi

   return $status
}

cordex()
{
   test ! ${isUpTables} && return 1

   local status

   if ! mkdir -p $QA_TABLES/tables/projects/$prj ; then
     mkdir -p $1
     return 41
   fi

   cd $QA_TABLES/tables/projects/$prj &> /dev/null

   if [ -d IS-ENES-Data.github.io ] ; then
     cd IS-ENES-Data.github.io

     if [ "$(getGitBranch)" != master ] ; then
       git checkout master &> /dev/null
     fi

     local remote
     declare -a remote

     remote=( $( git remote -v ) )
     if [ ${remote[1]##*/} = 'IS-ENES-Data.github.io' ] ; then
       git fetch >> log_cordex_tables.txt 2>&1 \
       && git reset --hard origin/master >> log_cordex_tables.txt 2>&1
       status=$?
     fi

     cd - &> /dev/null
   else
     git clone https://github.com/IS-ENES-Data/IS-ENES-Data.github.io \
       >> log_cordex_tables.txt 2>&1
     status=$?

   fi

   test ! -e CORDEX_RCMs_ToU.txt && \
     ln -sf IS-ENES-Data.github.io/CORDEX_RCMs_ToU.txt CORDEX_RCMs_ToU.txt

   if [ $status -gt 0 ] ; then
     err[${#err[*]}]="git failed for IS-ENES-Data.github.io"
   fi

   return ${status}
}

getGitBranch()
{
   git branch | grep '*' | awk '{print $2}'
   return 0
}

make_miniconda()
{
   local path quest
   path=${1}

   # look for a conda installation. Is conda in PATH?
   echo -e "\nminiconda2: 'yes' would approve the '3-clause BSD License'!" # > ${TTY}

   local isRead

   while : ; do
     read -p "  <yes: in ${path}/miniconda2, r: read license, [no]>: " \
          quest # 2> ${TTY}

     case $quest in
       ( y | yes)  ;;
       ( no | '') return 41  ;;
       r) isRead=t ;;
       *) continue ;;
     esac

     if mkdir -p ${path} ; then
        cd ${path}
     else
        return 41
     fi

     if [ ! -f Miniconda-latest-Linux-x86_64.sh ] ; then
       wget --timeout=${WGET_TOUT} -l1 -N -np \
          https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh
     fi

     if [ ${isRead:-f} = t ] ; then
       #bash Miniconda2-latest-Linux-x86_64.sh  > ${TTY} << EOF
       bash Miniconda2-latest-Linux-x86_64.sh << EOF

no
EOF
       continue
     fi

     if ! bash Miniconda2-latest-Linux-x86_64.sh -b -p ${path}/miniconda2  \
           &> /dev/null ; then

         err[${#err[*]}]="failed bash Miniconda2-latest-Linux-x86_64.sh -b -p $path/moiniconda2"
         return 41
     fi

     break
   done

   return 0
}

xlsx2csv()
{
   local xc=$QA_TABLES/xlsx2csv/xlsx2csv.py

   if [ ! -f $xc ] ; then
      if ! mkdir -p $QA_TABLES ; then
        mkdir -p $1
        return 41
      fi
      cd $QA_TABLES &> /dev/null

      git clone http://github.com/dilshod/xlsx2csv >> log_install_xlsx2csv.txt 2>&1

      if [ $? -gt 0 ] ; then
        err[${#err[*]}]="git failed for xlsx2csv"
        return 41
      fi
   fi

    # new or restored entry in the config file
   . $QA_SRC/scripts/parseConfigFile XLSX2CSV=$xc
   XLSX2CSV=$xc

   return 0
}

update_CONDA_env()
{
  local conda_name=$1      # is always defined
  local conda_channels=$2  # is always defined
  local conda_path=$3      # is always defined
  local conda_env=${4##*/} # could be empty
  local action=$5          # could be empty

  test ${conda_env:-none} = none && conda_env=cmor
  test ! ${action} && action=update

  test ! ${NET} && return
  test "${conda_env}" = '-n ' && conda_env=

  if [ ! -w "${QA_SRC}" ] ; then
    return
    #echo "no write-permission for ${QA_SRC}"
    #exit 1
  elif [ ${action} = update ] ; then
    # look for a new conda-built package
    echo "searching ${conda_name} updates" # > ${TTY}

    if [ ! ${isNoPW} ] ; then
      progress_wheel &
      job_id=$!
    fi

    set -f
    ${conda_path} ${action} ${conda_env:+-n ${conda_env}} \
                       ${conda_channels//,/ } \
                       ${conda_name} &> /dev/null << EOF
y
EOF

    test ! ${isNoPW} && kill -TERM $job_id

    set +f
  else
    # only CMOR could here be created
    ${conda_path} ${action} ${conda_env:+-n ${conda_env}} \
            ${CONDA_CMOR_CHANNELS//,/ } ${CONDA_CMOR_NAME} # > ${TTY}

    if [ $? -eq 0 ] ; then
      if [ ${CONDA_CMOR_ENV} ] ; then
        PrePARE=${CONDA_CMOR_ENV}/bin/PrePARE
        . $QA_SRC/scripts/parseConfigFile PrePARE=${PrePARE}
      fi
    fi
  fi

  return 0
}

main()
{
  # main
  local err currFile last prj status currPWD
  local isForce w_perm
  local QA_TABLES QA_SRC CONFIG_FILE
  local args

  declare -a err args currFile last
  args=( $* )

  local OPTARG OPTIND

  while getopts hP:-: option ${args[*]}
  do
    case $option in
      h)  ;;
      P)  prj=${OPTARG} ;;
      -) if [ ${OPTARG%=*} = 'config_file' ] ; then
           CONFIG_FILE=${OPTARG#*=}
         elif [ ${OPTARG} = 'debug' ] ; then
           set -x
         elif [ ${OPTARG} = 'force' ] ; then
           isForce=t
           isUpCmorConda=t
           isUpCMOR=t
           isUpTables=t
         elif [ ${OPTARG} = 'no-w-perm' ] ; then
           w_perm=f
         elif [ ${OPTARG%%=*} = 'update' ] ; then
            OPTARG=${OPTARG#*=}
            if [ "${OPTARG/force/}" != "${OPTARG}" ] ; then
              isUpCMOR=t
              isUpTables=t
            else
               if [ "${OPTARG/cmor/}" != "${OPTARG}" ] ; then
                 isUpCMOR=t
               elif [ "${OPTARG/tables/}" != "${OPTARG}" ] ; then
                 isUpTables=t
               fi
            fi
         elif [ ${OPTARG%=*} = "qa-tables" -o ${OPTARG%=*} = "qa-home" ] ; then
           QA_TABLES=${OPTARG#*=}
         elif [ ${OPTARG%=*} = "qa-src" ] ; then
           QA_SRC=${OPTARG##*=}
         fi
         ;;
     \?) echo "get_externalSources: undefined option $option"
         return 41 ;;
    esac
  done

  if [ ! ${QA_TABLES} ] ; then
    echo "QA_TABLES not specified in $HOME/.qa-dkrz/config.txt?"
    return 41
  fi

  currPWD=$(pwd)
  cd $QA_TABLES &> /dev/null

  status=0
  # note that LAST_${prj}_UPDATE checks whether there was ever a download,
  #

  if [ "$prj" = CF ] ; then
     # always CF for any other project
     if . $QA_SRC/scripts/parseConfigFile LAST_CF_UPDATE || [ ${isForce} ] ; then
       if cf ; then
          . $QA_SRC/scripts/parseConfigFile LAST_CF_UPDATE=$(date '+%Y%m%d')
       else
         cd ${currPWD} &> /dev/null
         status 41
       fi
     fi
  fi

  if [ "$prj" = CORDEX ] ; then
    if . $QA_SRC/scripts/parseConfigFile LAST_${prj}_UPDATE  || [ ${isForce} ] ; then
      if ! cordex ; then
        status=$?
      fi
    fi

  elif [ "$prj" = CMIP6 ] ; then
    if . $QA_SRC/scripts/parseConfigFile LAST_${prj}_UPDATE  || [ ${isForce} ] ; then
      if ! cmip6 ; then
        status=41
      fi
    fi
  fi

  if [ ${#err[*]} -gt 0 ] ; then
     for(( k=0 ; k < ${#err[*]} ; ++k )) ; do
        echo -e "${err[k]}"
     done

     status=41
  fi

  # get former value in global scope
  test ${status} -eq 0 && \
     . $QA_SRC/scripts/parseConfigFile LAST_${prj}_UPDATE=$(date '+%Y%m%d')

  cd ${currPWD} &> /dev/null

  return ${status}
}

main $*
geS_retVal=$?

test ${isDebug} && echo "return: get_externalSources" > /dev/null

return $geS_retVal
