WGET_TOUT=60

ges_cf()
{
  if ! mkdir -p $QA_TABLES/tables/projects/CF ; then
     mkdir -p $1
     return 41
  fi
  cd $QA_TABLES/tables/projects/CF

  # htmnl page containing access to cf related tables
  local org=http://cfconventions.org
  local html=standard-names.html

  # purpose: contains links and version data to the latest xml tables
  if ! ges_cf_html ; then
     # already up2date
     return 0
  fi

  local last now
  local status=0
  local retVal=0

  if ! ges_get_xml $ges_cf_STANDARD_NAME_TABLE ; then
     retVal=1
  fi

  if ! ges_get_xml $ges_cf_REGION_LIST_TABLE ; then
     retVal=1
  fi

  if ! ges_get_xml $ges_cf_AREA_TYPE_TABLE ; then
     retVal=1
  fi

  . $QA_SRC/scripts/parseConfigFile NEXT_CF_UPDATE

  return $retVal
}

ges_cf_html()
{
  local last now
  local status=0

  # html page contains access to cf related tables

  ges_checkDate init $html

  wget --timeout=$WGET_TOUT -q -N $org/$html

  if [ ! -f $html ] ; then
    err[${#err[*]}]="failed wget -N $org/$html"
    return 41
  fi

  if ! ges_checkDate $html ; then
     return 1
  fi

  # get version and date

  # current links to latest xml versions
  ges_cf_STANDARD_NAME_TABLE="$(grep -m 1 cf-standard-name-table.xml $html)"
  ges_cf_STANDARD_NAME_TABLE="${ges_cf_STANDARD_NAME_TABLE%\"*}"
  ges_cf_STANDARD_NAME_TABLE="${ges_cf_STANDARD_NAME_TABLE#*\"}"

  ges_cf_AREA_TYPE_TABLE="$(grep -m 1 area-type-table.xml $html)"
  ges_cf_AREA_TYPE_TABLE="${ges_cf_AREA_TYPE_TABLE%\"*}"
  ges_cf_AREA_TYPE_TABLE="${ges_cf_AREA_TYPE_TABLE#*\"}"

  ges_cf_REGION_LIST_TABLE="$(grep -m 1 standardized-region-list.xml $html)"
  ges_cf_REGION_LIST_TABLE="${ges_cf_REGION_LIST_TABLE%\"*}"
  ges_cf_REGION_LIST_TABLE="${ges_cf_REGION_LIST_TABLE#*\"}"

  # get versions
  local v=

  local i v_str g_str t_str
  declare -a v_str g_str t_str

  g_str[0]='Standard Name Table'
  g_str[1]='Standardized Region List'
  g_str[2]='Area Type Table'

  t_str[0]='std-name='
  t_str[1]='region='
  t_str[2]='area='

  for(( i=0 ; i < ${#g_str[*]} ; ++i )) ; do
    v_str=()
    v_str="$(grep "${g_str[i]}"' (.*)' $html)"
    v_str="${v_str#*\(}"
    v_str=(${v_str%)*})
    v_str[2]="${v_str[2]:0:3}."
    v_str="${v_str[*]}"
    v_str=${v_str// /}

    v="${v}${v:+,}${t_str[i]}${v_str}"
  done

  . $QA_SRC/scripts/parseConfigFile CF_STD_NAME_VERSION=$v

  return 0
}

ges_convert_xml2txt()
{
  local xmlFile=$1
  local txtFile=cf-${1%xml}txt

  if [ -f ${txtFile} ] ; then
    local h_date=$(ls -l --time-style='+%Y%m%d' ${xmlFile} | awk '{print $6}')
    local t_date=$(ls -l --time-style='+%Y%m%d' ${txtFile} | awk '{print $6}')

    test $h_date -lt $t_date && return 0
  fi

  # convert plain xml to text

  rm -f ${txtFile}
  local txt
  while read line ; do
    for(( i=0 ; i < ${#line} ; ++i )) ; do
      # rm leading blanks
      test "${line:i:1}" = ' ' && continue

      if [ "${line/entry id/}" != "${line}" ] ; then
        line=${line#*=}
        line=${line:1:$((${#line}-3))}
        echo "${line}" >> $txtFile

        continue 2
      fi

      break  #get next line
    done
  done < $xmlFile

  return 0
}


ges_get_xml()
{
  local table="$1"

  if [ ${#table} -gt 0 ] ; then
    if ! wget --timeout=$WGET_TOUT -q -N $org/$table ; then
      err[${#err[*]}]="failed wget -q -N $org/$table"
      return 41
    fi
  fi

  # xml is parsed by the c++ executable
  test "${1##*/}" = cf-standard-name-table.xml && return 0

  ges_convert_xml2txt ${table##*/}

  return $?
}

ges_checkDate()
{
   if [ $1 = init ] ; then
     ges_currFile[${#ges_currFile[*]}]=$2
     ges_last[${#ges_last[*]}]=0

     if [ -f $2 ] ; then
       ges_last=$( ls -l --time-style='+%s' $2 | awk '{print $6}' )
     fi

     return 1
   fi

   # find index of currFile for $1, i.e. the filename
   local i
   for(( i=0 ; i < ${#ges_currFile[*]} ; ++i )) ; do
     test $1 = ${ges_currFile[i]} && break
   done

   local now
   now=$( ls -l --time-style='+%s' ${ges_currFile[i]} | awk '{print $6}' )
   test ${now} -gt ${ges_last[i]}  && return 0

   return 1
}

ges_cmip6()
{
   local status=0
   local isCMIP6=t

   if [ ! ${XLSX2CSV} ] || [ ! -f "${XLSX2CSV}" ] ; then
     if ! ges_xlsx2csv ; then
        status=$?
     fi
   fi

   if ! mkdir -p $QA_TABLES/tables/projects/$prj ; then
     mkdir -p $1
     return 41
   fi
   cd $QA_TABLES/tables/projects/$prj &> /dev/null

   if [ ! ${PrePARE} ] ; then
     forceUpdate=t
   elif [ ! ${UDUNITS2_XML_PATH} ] ; then
     forceUpdate=t
   fi

   if ! ges_cmip6_mip ; then # non-cmor tables
      status=$?
   fi

   if [ ${w_perm:-t} = t ] ; then
     if ! ges_cmip6_conda ; then
       status=$?
     fi

     if ! ges_cmip6_cmor ; then
       status=$?
     fi
   fi

   return $status
}

ges_cmip6_cmor()
{
   # Clone the CMIP6 table to your working directory.
   # Disable SSL verification (firewall only).

   if [ -d ${QA_TABLES}/tables/projects/CMIP6/cmip6-cmor-tables ] ; then
     #look for an update
     cd ${QA_TABLES}/tables/projects/CMIP6/cmip6-cmor-tables &> /dev/null

     local remote
     declare -a remote
     remote=( $( git remote -v ) )
     if [ ${remote[1]##*/} = 'cmip6-cmor-tables.git' ] ; then
       git fetch &> log_cmip6-cmor-tables.txt \
       && git reset --hard origin/master &> log_cmip6-cmor-tables.txt
     fi
   elif [ -d ${QA_TABLES}/tables/projects/CMIP6 ] ; then
     cd ${QA_TABLES}/tables/projects/CMIP6 &> /dev/null

     git clone https://github.com/PCMDI/cmip6-cmor-tables.git &> log_cmip6-cmor-tables.txt
   fi

   local status=$?

   if [ $status -gt 0 ] ; then
     cat log_cmip6-cmor-tables.txt # > ${TTY}
   fi

   return $status
}

ges_cmip6_conda()
{
  test ! ${isUpdateCMOR} && return

  local conda_env cmp
  local action isNewConda

  test ${#CONDA_CMOR_ENV} -gt 0 -a ${#PrePARE} -gt 0 && action=update

  if [ ! ${action} ] ; then
    . $QA_SRC/scripts/parseConfigFile CONDA_CMOR_ENV
    . $QA_SRC/scripts/parseConfigFile PrePARE

    test ${#CONDA_CMOR_ENV} -gt 0 -a ${#PrePARE} -gt 0 && action=update
  fi

  if [ ! ${action} ] ; then
    if [ ${CONDA_PATH} ] ; then
      cmp=${CONDA_PATH%/bin/conda}
      if [ -d $cmp/envs/cmor ] ; then
         CONDA_CMOR_ENV=$cmp/envs/cmor
         test -f $CONDA_CMOR_ENV/bin/PrePARE && \
            PrePARE=$CONDA_CMOR_ENV/bin/PrePARE
      fi
    else
       . $QA_SRC/scripts/parseConfigFile CONDA_PATH

       if [ ! ${CONDA_PATH} ] ; then
          # try the configuration file for matches
          local prep=( $( grep PrePARE= ~/.qa-dkrz/config.txt ) )
          prep=${prep[0]#PrePARE=}
          if [ ${#prep[*]} -gt 0 ] ; then
             if [ -f ${prep} ] ; then
                . $QA_SRC/scripts/parseConfigFile PrePARE=${prep}
                PrePARE=${prep}
             fi

             local cce=${PrePARE%/bin/PrePARE}
             if [ -f ${CONDA_CMOR_ENV} ] ; then
                . $QA_SRC/scripts/parseConfigFile CONDA_CMOR_ENV=${cce}
                CONDA_CMOR_ENV=$cce
             fi

             local cp=${CONDA_CMOR_ENV%/envs/cmor}/bin/conda
             if [ -f ${CONDA_PATH} ] ; then
                . $QA_SRC/scripts/parseConfigFile CONDA_PATH=${cp}
                CONDA_PATH=$cp
             fi
          else
            echo "please, install conda"
            exit
          fi
       fi
    fi
  fi

  if [ ${CONDA_PATH} ] ; then
    if [ ! ${CONDA_CMOR_ENV} ] ; then
      cmp=${CONDA_PATH%/bin/conda}

      if [ -d $cmp/envs/cmor ] ; then
         CONDA_CMOR_ENV=$cmp/envs/cmor
         test -f $CONDA_CMOR_ENV/bin/PrePARE && \
             PrePARE=$CONDA_CMOR_ENV/bin/PrePARE
      fi
    fi

    # look for existing miniconda with a cmor installation
    . ${QA_SRC}/scripts/inqRunEnv funct=iRE_scanCondaEnv PrePARE

  else
    isNewConda=t
  fi

  if [ ${PrePARE} ] ; then
     action=update
  else
     action=create
  fi

  if [ ${action} = create ] ; then
     local prompt_text
     echo -e "\nCMIP6 requires conda for running CMOR." # > ${TTY}
     if [ ${isNewConda} ] ; then
       prompt_text=" <yes: in ${CONDA_CMOR_ENV%/bin/*}, [no]>: "
     else
       echo -e "\nDifferent installation modes are available:" # > ${TTY}
       echo    "    <a> environment of its own (original) " # > ${TTY}
       echo    "    <b> environment of qa-dkrz " # > ${TTY}
       echo    "    <c> a separate miniconda instantiated in the user-space" # > ${TTY}
       echo    "    <no> exit"
       prompt_text="Select: <a, b, user-defined-path, [no]>: "
     fi

     local quest

     while : ; do
       read -p "${prompt_text}"  quest # 2> ${TTY}

       case ${quest:0:1} in
         ( n |  '') exit 41  ;;
         (       a) conda_env=cmor  ;;
         (       b) conda_env=qa-dkrz  ;;
         *) if [ ${quest:0:1} != '/' ] ; then
              echo "Please, provide absolute path (in case of no typo)" # > ${TTY}
              continue
            else
              CONDA_CMOR_ENV=$quest
              isNewConda=t
            fi
            ;;
       esac

       break
     done
  fi

  if [ ${isNewConda} ] ; then
    if ges_make_miniconda ${CONDA_CMOR_ENV} ; then
      CONDA_CMOR_ENV=${CONDA_CMOR_ENV}/bin/conda
      . $QA_SRC/scripts/parseConfigFile CONDA_CMOR_ENV=${CONDA_CMOR_ENV}
    fi
  fi

  if [ ${CONDA_CMOR_ENV} ] ; then
    if update_CONDA_env "${CONDA_CMOR_NAME}" "${CONDA_CMOR_CHANNELS}" \
          "${CONDA_CMOR_ENV}" ${conda_env:-cmor} ${action} ; then

      return 0
    fi
  fi

  return 41
}

ges_cmip6_mip()
{
   local last now

   mkdir -p ${QA_TABLES}/tables/projects/CMIP6
   cd ${QA_TABLES}/tables/projects/CMIP6 &> /dev/null

   ges_checkDate init CMIP6_MIP_tables.xlsx

   wget --timeout=${WGET_TOUT} -l1 -N -np  \
      http://proj.badc.rl.ac.uk/svn/exarch/CMIP6dreq/tags/latest/dreqPy/docs/CMIP6_MIP_tables.xlsx \
      >> log_cmip6_tables.txt 2>&1

   if [ $? -gt 0 ] ; then
      err[${#err[*]}]="wget CMIP6_MIP_tables.xlsx from http://proj.badc.rl.ac.uk"
      cd - &> /dev/null
      return 41
   fi

   if ges_checkDate CMIP6_MIP_tables.xlsx ; then
     echo "CMIP6 - last update:" > README.txt
     echo "  CMIP6_MIP_tables.xlsx: $( date +'%F %T' )" > README.txt

     # location of extracted csv table sheets: [QA_TABLES/tables/projects/CMIP6]
     ${XLSX2CSV} -a -d '|' -l '\n' CMIP6_MIP_tables.xlsx CMIP6_MIP_tables
   fi

   # the CMIP6 json files
   if [ -d CMIP6_CVs ] ; then
     cd CMIP6_CVs

     if [ "$(ges_getGitBranch)" != master ] ; then
       git checkout master &> /dev/null
     fi

     git fetch && git reset --hard origin/master >> log_cmip6_tables.txt 2>&1
   else
     git clone https://github.com/WCRP-CMIP/CMIP6_CVs >> log_cmip6_tables.txt 2>&1
   fi

   local status=$?

   if [ $status -gt 0 ] ; then
      err[${#err[*]}]="git failed for CMIP6_CVs from https://github.com/WCRP-CMIP"
   fi

   return $status
}

ges_cordex()
{
   local status

   if ! mkdir -p $QA_TABLES/tables/projects/$prj ; then
     mkdir -p $1
     return 41
   fi

   cd $QA_TABLES/tables/projects/$prj &> /dev/null

   if [ -d IS-ENES-Data.github.io ] ; then
     cd IS-ENES-Data.github.io

     if [ "$(ges_getGitBranch)" != master ] ; then
       git checkout master &> /dev/null
     fi

     local remote
     declare -a remote

     remote=( $( git remote -v ) )
     if [ ${remote[1]##*/} = 'IS-ENES-Data.github.io' ] ; then
       git fetch >> log_cordex_tables.txt 2>&1 \
       && git reset --hard origin/master >> log_cordex_tables.txt 2>&1
       status=$?
     fi

     cd - &> /dev/null
   else
     git clone https://github.com/IS-ENES-Data/IS-ENES-Data.github.io \
       >> log_cordex_tables.txt 2>&1
     status=$?

   fi

   test ! -e CORDEX_RCMs_ToU.txt && \
     ln -sf IS-ENES-Data.github.io/CORDEX_RCMs_ToU.txt CORDEX_RCMs_ToU.txt

   if [ $status -gt 0 ] ; then
     err[${#err[*]}]="git failed for IS-ENES-Data.github.io"
   fi

   return ${status}
}

ges_getGitBranch()
{
   git branch | grep '*' | awk '{print $2}'
   return 0
}

ges_make_miniconda()
{
   local path quest
   path=${1}

   # look for a conda installation. Is conda in PATH?
   echo    "miniconda: 'yes' would approve the '3-clause BSD License'!" # > ${TTY}

   local isRead

   while : ; do
     read -p "  <yes: in ${path}/miniconda, r: read license, [no]>: " \
          quest # 2> ${TTY}

     case $quest in
       ( y | yes)  ;;
       ( no | '') return 41  ;;
       r) isRead=t ;;
       *) continue ;;
     esac

     if mkdir -p ${path} ; then
        cd ${path}
     else
        return 41
     fi

     if [ ! -f Miniconda-latest-Linux-x86_64.sh ] ; then
       wget --timeout=${WGET_TOUT} -l1 -N -np \
          https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh
     fi

     if [ ${isRead:-f} = t ] ; then
       #bash Miniconda-latest-Linux-x86_64.sh  > ${TTY} << EOF
       bash Miniconda-latest-Linux-x86_64.sh << EOF

no
EOF
       continue
     fi

     if ! bash Miniconda-latest-Linux-x86_64.sh -b -p ${path} \
           &> /dev/null ; then

         err[${#err[*]}]="failed bash Miniconda-latest-Linux-x86_64.sh -b -p ${CONDA_CMOR_ENV}/miniconda"
         return 41
     fi

     break
   done

   return 0
}

ges_xlsx2csv()
{
   local xc=$QA_TABLES/xlsx2csv/xlsx2csv.py

   if [ ! -f $xc ] ; then
      if ! mkdir -p $QA_TABLES ; then
        mkdir -p $1
        return 41
      fi
      cd $QA_TABLES &> /dev/null

      git clone http://github.com/dilshod/xlsx2csv >> log_install_xlsx2csv.txt 2>&1

      if [ $? -gt 0 ] ; then
        err[${#err[*]}]="git failed for xlsx2csv"
        return 41
      fi
   fi

    # new or restored entry in the config file
   . $QA_SRC/scripts/parseConfigFile XLSX2CSV=$xc
   XLSX2CSV=$xc

   return 0
}

# main
declare -a err
declare -a ges_currFile
declare -a ges_last

while getopts hP:-: option
do
  case $option in
    h)  ;;
    P)  prj=${OPTARG} ;;
    -) if [ ${OPTARG%=*} = 'config_file' ] ; then
         CONFIG_FILE=${OPTARG#*=}
       elif [ ${OPTARG} = 'debug' ] ; then
         set -x
       elif [ ${OPTARG} = 'force-update' ] ; then
         forceUpdate=t
       elif [ ${OPTARG} = 'no-w-perm' ] ; then
         w_perm=f
       elif [ ${OPTARG} == 'update' ] ; then
         isUpdate=t
       elif [ ${OPTARG} == 'update-cmor' ] ; then
         isUpdateCMOR=t
       elif [ ${OPTARG%=*} = "qa-tables" -o ${OPTARG%=*} = "qa-home" ] ; then
         QA_TABLES=${OPTARG#*=}
       elif [ ${OPTARG%=*} = "qa-src" ] ; then
         QA_SRC=${OPTARG##*=}
       fi
       ;;
   \?) echo "get_externalSources: undefined option $option"
       return 41 ;;
  esac
done

if [ ! ${QA_TABLES} ] ; then
  echo "QA_TABLES not specified in $HOME/.qa-dkrz/config.txt?"
  return 41
fi

currPWD=$(pwd)
cd $QA_TABLES &> /dev/null

# Note that CF may-be stand-alone or together with another project
if ! . $QA_SRC/scripts/parseConfigFile NEXT_CF_UPDATE --inquire \
        || [ ${forceUpdate:-f} = t ] ; then
   if ! ges_cf ; then
     cd ${currPWD} &> /dev/null
     return 41
   fi
fi

if . $QA_SRC/scripts/parseConfigFile NEXT_${prj}_UPDATE --inquire \
       && [ ${forceUpdate:-f} = f ] ; then
  return 0
fi

status=0

if [ "$prj" = CORDEX ] ; then
  if ! ges_cordex ; then
    status=$?
  fi
elif [ "$prj" = CMIP6 ] ; then
  if ! ges_cmip6 ; then
    status=$?
  fi
fi

if [ ${#err[*]} -gt 0 ] ; then
   for(( k=0 ; k < ${#err[*]} ; ++k )) ; do
      echo -e "${err[k]}"
   done

   status=41
fi

test ${status} -eq 0 && \
   . $QA_SRC/scripts/parseConfigFile NEXT_${prj}_UPDATE

cd ${currPWD} &> /dev/null

return ${status}
