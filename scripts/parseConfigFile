# embedded function, i.e. has to be included by source or '.'

# note that such an embedded functionality replaces positional parameters
# by those which are passed. If none are passed, then the positional parameters
# of the calling instance are used.

# return 0 for a match between provided parameter=value and config file,
#          a enabled one.
# return 1 for a new/updated parameter, a mismatch, disable, a set variable, not defined, or when the date is today

ship()
{
  local i j k last arr x_itm
  declare -a arr x_itm

  if [ ${uCF_caption} ] ; then
     # section caption
     x_itm=( ${uCF_caption//\// } )
     for((j=0 ; j < ${#x_itm[*]} ; ++j )) ; do
        if [ ${x_itm[j]} = 'envs' ] ; then
          test ${x_itm[$((j+2))]} = 'opt' && break
        fi
     done

     if [ $j -eq ${#x_itm[*]} ] ; then
        # GitHub based
        arr[0]="SUBST/QA-DKRZ:"
     else
        # conda built
        arr[0]="SUBST"
        for((k=j-1 ; k < ${#x_itm[*]} ; ++k )) ; do
           arr[0]="${arr[0]}/${x_itm[k]}"
        done
     fi
  fi

  for(( i=0 ; i < ${#uCF_lines[*]} ; ++i )) ; do
    ai=$((i+1))
    local name=${uCF_lines[i]%=*}
    local val=${uCF_lines[i]#*=}

    if [ ${name} = QA_TABLES ] ; then
       x_itm=( ${val//\// } )
       last=$(( ${#x_itm[*]} -1 ))
       arr[ai]="${name}=SUBST/${x_itm[last]}"

    elif [ ${name} = CONDA_PATH ] ; then
       x_itm=( ${val//\// } )
       for((j=0 ; j < ${#x_itm[*]} ; ++j )) ; do
          if [ ${x_itm[j]} = 'bin' -a ${x_itm[$((j+1))]} = 'conda' ] ; then
            break
          elif [ ${x_itm[j]} = 'bin' -a ${x_itm[$((j+1))]} = 'anaconda' ] ; then
            break
          fi
       done

       arr[ai]="${name}=SUBST"
       for((k=j-1 ; k < ${#x_itm[*]} ; ++k )) ; do
          arr[ai]="${arr[ai]}/${x_itm[k]}"
       done

    elif [ ${name} = PrePARE ] ; then
       x_itm=( ${val//\// } )
       for((j=0 ; j < ${#x_itm[*]} ; ++j )) ; do
          if [ ${x_itm[j]} = 'envs' ] ; then
            test ${x_itm[$((j+2))]} = 'bin' -a \
                   ${x_itm[$((j+3))]} = 'PrePARE' && break
          fi
       done

       arr[ai]="${name}=SUBST"
       for((k=j-1 ; k < ${#x_itm[*]} ; ++k )) ; do
          arr[ai]="${arr[ai]}/${x_itm[k]}"
       done

    elif [ ${name} = CONDA_CMOR_ENV ] ; then
       x_itm=( ${val//\// } )
       for((j=0 ; j < ${#x_itm[*]} ; ++j )) ; do
          if [ ${x_itm[j]} = 'envs' ] ; then
            break
          fi
       done

       arr[ai]="${name}=SUBST"
       for((k=j-1 ; k < ${#x_itm[*]} ; ++k )) ; do
          arr[ai]="${arr[ai]}/${x_itm[k]}"
       done

    elif [ ${name} = XLSX2CSV ] ; then
       x_itm=( ${val//\// } )
       for((j=0 ; j < ${#x_itm[*]} ; ++j )) ; do
          if [ ${x_itm[j]} = 'xlsx2csv' -a ${x_itm[$((j+1))]} = 'xlsx2csv.py' ] ; then
            break
          fi
       done

       arr[ai]="${name}=SUBST"
       for((k=j-1 ; k < ${#x_itm[*]} ; ++k )) ; do
          arr[ai]="${arr[ai]}/${x_itm[k]}"
       done

    elif [ ${uCF_lines[i]%=*} = UPDATE ] ; then
       arr[ai]="UPDATE=frozen"

    else
       arr[ai]="${uCF_lines[i]}"
    fi
  done

  echo -n '' >> ${QA_SRC}/.ship-qa-config.txt
  for(( i=0 ; i < ${#arr[*]} ; ++i )) ; do
     echo "${arr[i]}" >> ${QA_SRC}/.ship-qa-config.txt
  done

  isShip=

  return 0
}

readCF()
{
   # adjust for spaces a user may have edited into the section

   # because of embedded code, uCF_lines stay vivid once set.

   local sz

   test ${uCF_blkBeg} && return 0

   uCF_blkBeg=0
   sz=0 # number in the file, not in the block
   local uCF_is=f

   while read line ; do
       sz=$((sz + 1))

       if [ "${uCF_is}" = t ] ; then
          test ! "${line}" && break
       elif expr match "$line" '^[[:space:]]*#' > /dev/null ; then
          continue
       fi

       if [ "${line}" = ${QA_SRC}: ] ; then
           uCF_is=t
           uCF_blkBeg=$sz
           uCF_caption=${line}
           continue
       fi

       if [ ${uCF_is} = t ] ; then
           line=${line// /}

           while [ ${line/==/=} != ${line} ] ; do
               line=${line/==/=}
           done

           # backward-comp.: QA_HOME --> QA_TABLES
           if [ "${line%%=*}" = "QA_HOME" ] ; then
              line=QA_TABLES="${line#*=}"
           fi

           uCF_lines[${#uCF_lines[*]}]="${line}"

           # Note that this makes config assignments to genuine variables
           export eval ${line}
       fi

   done < ${CONFIG_FILE}

   # append a new section and a particular default for auto-update
   local n=0
   if [ ${uCF_blkBeg} -eq 0 ] ; then
       if [ ${sz} -gt 0 ] ; then
          n=2
          echo ''         >> $CONFIG_FILE
       else
          n=1
       fi

       echo "${QA_SRC}:"  >> $CONFIG_FILE
   fi

   export uCF_blkBeg=$(( uCF_blkBeg + n ))

   #first line after the block
   export uCF_blkEnd=$(( uCF_blkBeg + ${#uCF_lines[*]} ))

   return 0
}

show_lines()
{
  local i retVal
  for(( i=0 ; i < ${#uCF_lines[*]} ; ++i )) ; do
       echo ${uCF_lines[i]}
  done

  return
}

updateConfFile()
{
   # check items
   local param=$1
   local param_name=${param%=*}
   local param_value=${param#*=}

   if [ "${param_value}" = f ] ; then
       param=${param_name}=disable
       param_value=disable
   elif [ "${param_value}" = t ] ; then
       param=${param_name}=enabled
       param_value=enabled
   elif [ "${param_value}" = ${param_name} ] ; then
       param_value=
   fi

   local i
   local status=0

   # find a match between config.txt lines and current param_name
   for(( i=0 ; i < ${#uCF_lines[*]} ; ++i )) ; do
       if [ ${uCF_lines[i]%%=*} = ${param_name} ] ; then
          if [ "${param_value}" = 'delete' ] ; then
            lineNum=$((uCF_blkBeg+i+1))
            sed -i "${lineNum} d" $CONFIG_FILE &> /dev/null
            uCF_blkEnd=$(( uCF_blkEnd -1 ))
            unset uCF_lines[i]
            uCF_lines=( ${uCF_lines[*]} )
            return 1
          fi

          break
       fi
   done

   if [ $i -lt ${#uCF_lines[*]} ] ; then
     if [ ${param_name:0:5} = LAST_ ] ; then
        local line=${uCF_lines[i]}
        local today=$(date '+%Y%m%d')
        local last="${uCF_lines[i]#*=}"

        test ${today} = "${last}" && status=1
     fi

     if [ "${param}" = "${param_name}" ] ; then
       # request
       if [ "${uCF_lines[i]#*=}" = disable ] ; then
         eval ${param_name}=f
         status=1
       elif [ "${uCF_lines[i]#*=}" = enable ] ; then
         eval ${param_name}=t
       else
         # read value from the config file and set variable
         eval ${uCF_lines[i]}
       fi
     elif [ ${uCF_lines[i]} = ${param} ] ; then
       # comparison
       if [ ${param_value} = disable ] ; then
         # disable
         eval ${param_name}=f
         status=1
       elif [ ${param_value} = enabled ] ; then
         # enable or unchanged (matched).
         eval ${param_name}=t
       fi
       # else: match
     elif [ ! ${read_only} ] ; then
        if [ ${#param_value} -gt 0 ] ; then
           if [ ${param_value} = delete ] ; then
             isDelete=t
           else
             lineNum=$((uCF_blkBeg+i+1))
             sed -i "${lineNum} c${param}" $CONFIG_FILE &> /dev/null
             uCF_lines[i]="${param_name}=${param_value}"
           fi

           status=1
        fi
     fi
   else
     # current param not found in config.txt, yet
     status=1
     if [ "${param_value}" != delete ] ; then
       if [ ${#param_value} -gt 0 ] && [ ! ${read_only} ] ; then
         # new
         sed -i "${uCF_blkEnd} a${param}" $CONFIG_FILE &> /dev/null

         local sz=${#uCF_lines[*]}
         uCF_lines[sz]="${param}"
         uCF_blkEnd=$(( uCF_blkEnd + 1 ))
       fi
     fi
   fi

   return $status
}

voidX()
{
  # toggle between set -x and set +x in a way that
  # restores the original setting after calling twice

  test ${pC_isNoToggleX} && return

  if [ ${isSetX:-t} = t ] ; then
    test "$(set -o |grep xtrace | awk '{print $2}')" = off && return

    # first call
    isSetX=on
  fi

  # restore previous setting
  if [ ${isSetX} = off ] ; then
    set -x
    isSetX=on
  else
    set +x
    isSetX=off
  fi

  return
}

# main
main()
{
   test $# -eq 0 && return 1

   local arg args read_only no_path isReadAll freq isShip
   local retVal

   declare -a args
   args=()

   for arg in $* ; do
     if [ "${arg}" = '--no-path' ] ; then
       no_path=t
     elif [ "${arg}" = '--read' ] ; then
       unset uCF_lines
       unset uCF_blkBeg
     elif [ "${arg}" = '--read-all' ] ; then
       unset uCF_lines
       unset uCF_blkBeg
       isReadAll=t
     elif [ "${arg:0:6}" = '--ship' ] ; then
       isShip=t
     else
       args+="$arg"
     fi
   done

   if [ ${CONFIG_READ_ONLY} ] ; then
       read_only=t
   elif [ ! -w ${CONFIG_FILE} ] ; then
       read_only=t
   fi

   if [ "${CONFIG_FILE}" ] ; then
     if [ ! ${read_only} ] ; then
       if [ ! -f "${CONFIG_FILE}" ] ; then
         mkdir -p ${CONFIG_FILE%/*}
         touch ${CONFIG_FILE}
       fi
     fi
   else
     return 2 # no config file
   fi

   if [ ${#uCF_lines[*]} -eq 0 ] ; then
     unset uCF_line_0
     unset uCF_blkBeg
     readCF
   fi

   if [ ${isShip:-f} = t ] ; then
     ship
     return 0
   fi

   if [ ${isReadAll} ] ; then
      retVal=1
      local i name val
      for(( i=0 ; i < ${#uCF_lines[*]} ; ++i )) ; do
         # read value from the config file and set variable
         name=${uCF_lines[i]%%=*}
         val="${uCF_lines[i]#*=}"
         val="${val//|/\\|}"

         eval ${name}="${val}"
         retVal=0
      done

      # ok also for nothing read at all
      return $retVal
   fi

   test ${#args[*]} -eq 0 && return 0

   retVal=$?
   updateConfFile ${args[*]}
   retVal=$?

   return $retVal
}

#pC_isNoToggleX=t
voidX

main $*
pC_retVal=$?

voidX

test ${isDebug} && echo "return: parseConfigFile" > /dev/null

return $pC_retVal
