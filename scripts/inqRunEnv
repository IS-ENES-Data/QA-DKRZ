# get the state of the current QA-DKRZ installation

iRE_checkForUpdate()
{
  # 1st run on this day?
  local val
  test ! ${today} && today=$( date '+%Y%m%d' )

  local failedItems
  declare -a failedItems

  for(( i=0 ; i < ${#name[*]} ; ++i )) ; do
    val=${value[i]}

    if [ ${rname[i]:0:1} = '+' ] ; then
       if [ ! ${val} ] ; then
          upCount=$(( upCount + 1 ))
          failedItems[${#failedItems[*]}]=${name[i]}

          break
       elif [ ${val:0:1} = '/' -a ! -e ${val} ] ; then
          upCount=$(( upCount + 1 ))
          break
       fi
    fi

    if [ ! ${isRO} ] ; then
      if [ "${val:0:2}" = '20' -a ${rname[i]:0:1} = '-' ] ; then
         if ! . ${QA_SRC}/scripts/parseConfigFile ${name[i]} --inquire ; then
            upCount=$(( upCount + 1 ))
            break
         fi
      fi
    fi
  done

  if [ ${#failedItems[*]} -gt 0 -a "${QA_TABLES}" ] ; then
    # try to restore missing items in config.txt from QA_TABLES
    local item
    for item in ${failedItems[*]} ; do
       if [ ${item} = XLSX2CSV ] ; then
          item=$( find ${QA_TABLES} -name xlsx2csv.py )
          if [ ${item} ] ; then
             . ${QA_SRC}/scripts/parseConfigFile XLSX2CSV=$item
             XLSX2CSV=$item
             upCount=$(( upCount -1 ))
          fi
       fi
    done
  fi

  return
}

iRE_checkTables()
{
  local prj=$1

  if [ ! ${QA_TABLES} ] ; then
    upCount=$(( upCount + 1 ))
    return
  elif [ ! -d ${QA_TABLES}/tables/projects/$prj ] ; then
    upCount=$(( upCount + 1 ))
    return
  else
    local p=${QA_TABLES}/tables/projects

    if [ ${#prj} -eq 0 -a ${#DEFAULT_PROJECT} -gt 0 ] ; then
      prj=${DEFAULT_PROJECT}
    fi

    local reqItems
    declare -a reqItems

    if [ "${prj}" = CORDEX ] ; then
      reqItems=( \
        $p/${prj}/CORDEX_DRS_CV.csv \
        $p/${prj}/CORDEX_GCMModelName.txt \
        $p/${prj}/CORDEX_RCMs_ToU.txt \
        $p/${prj}/CORDEX_variables_requirement_table.csv
      )
    elif [ "${prj}" = CMIP6 ] ; then
      reqItems=( \
        $p/${prj}/CMIP6_check-list.conf \
        $p/${prj}/CMIP6_DRS_CV.csv \
        $p/${prj}/CMIP6_CVs \
        $p/${prj}/cmip6-cmor-tables \
        $p/${prj}/CMIP6_MIP_tables
      )
    fi

    # check always CF
    reqItems=( ${reqItems[*]} \
      $p/CF/CF_check-list.conf \
      $p/CF/cf-area-type-table.txt \
      $p/CF/cf-standardized-region-list.txt \
      $p/CF/cf-standard-name-table.xml \
      )

    local rI
    for rI in ${reqItems[*]} ; do
      if [ ! -e ${rI} ] ; then
        upCount=$(( upCount + 1 ))
        break
      fi
    done
  fi

  return
}

iRE_CMIP6()
{
    # check required paths or ENV
    . ${QA_SRC}/scripts/parseConfigFile PrePARE

    if [ ! -f "${PrePARE}" ] ; then
      iRE_findLatestPrePARE

      # try again
      test -f ${PrePARE} && \
         . ${QA_SRC}/scripts/parseConfigFile PrePARE=$PrePARE
    fi

    if [ ! -f "${PrePARE}" ] ; then
        askStr="STOP: <ENTER>, <your-path>: "

        while : ; do
           echo -e "\nCMIP6 requires the conda cmor package; installation e.g. by:"
           echo "   conda create -n cmor -c conda-forge -c pcmdi cmor ."
           echo "If cmor isn't installed, yet, please quit and do so, otherwise provide"
           echo "the path to the conda environment containing the CMOR package"
           read -p "$askStr" answ 2> ${TTY}

           case ${answ:0:1} in
              '') exit 0  ;;
               y) ;;
               *) CONDA_CMOR_ENV=${answ#*=}

                  if [ ! -d ${CONDA_CMOR_ENV} ] ; then
                     echo "no such directory ${CONDA_CMOR_ENV}"
                     continue
                  fi
                  ;;
           esac

           local fs
           declare -a fs
           fs=( $( find ${CONDA_CMOR_ENV} -type f -name "PrePARE" ) )
           iRE_findLatestFile PrePARE ${fs[*]}

           if [ -f ${PrePARE} ] ; then
              . ${QA_SRC}/scripts/parseConfigFile PrePARE=$PrePARE
              test ${upCount} -gt 0 && upCount=$(( upCount - 1 ))
              break
           fi
        done

    fi

    return
}

iRE_findLatestFile()
{
  local back=$1
  shift

  local pp tt
  declare -a pp tt

  pp=($*)
  # find the latest command
  for(( i=0 ; i < ${#pp[*]} ; ++i )) ; do
    tt[${#tt[*]}]=$(ls -l --time-style=+'%FT%T' ${pp[i]} | awk '{print $(NF-1)}')
  done

  # sort
  local j tmp_t tmp_p
  for(( i=0 ; i < ${#pp[*]} - 1 ; ++i )) ; do
    for(( j=i+1 ; i < ${#pp[*]} ; ++i )) ; do
      if [[ ${tt[i]} < ${tt[j]} ]] ; then
        tmp_t=${tt[i]}
        tmp_p=${pp[i]}
        tt[i]=${tt[j]}
        pp[i]=${pp[j]}
        tt[j]=${tmp_t}
        pp[j]=${tmp_p}
      fi
    done
  done

  eval ${back}=${pp[0]}

  return 0
}

iRE_findLatestPrePARE()
{
  local i cc pp pp_all pp_no_pkgs latest_conda
  declare -a cc pp pp_all pp_no_pkgs
  pp_all=( $(. ${QA_SRC}/scripts/which_cmd_alias -q PrePARE ) )

  if [ ${#pp_all[*]} -eq 0 ] ; then
    # try with existing conda(s)
    cc=( $(. ${QA_SRC}/scripts/which_cmd_alias -q conda ) )
    if [ ${#cc[*]} -gt 1 ] ; then
       iRE_findLatestFile latest_conda ${cc[*]}
    else
       latest_conda=${cc[0]}
    fi

    test ! ${latest_conda} && return

    for(( i=0 ; i < ${#cc[*]} ; ++i )) ; do
      pp_all=( ${pp_all[*]} $( find ${latest_conda%/bin/conda} -name "PrePARE" ) )
    done
  fi

  for(( i=0 ; i < ${#pp_all[*]} ; ++i )) ; do
    if [ ${pp_all[i]} = ${pp_all[i]/\/pkgs\//} -a \
           ${pp_all[i]} = ${pp_all[i]/\/lib\//} ] ; then
       pp_no_pkgs[${#pp_no_pkgs[*]}]=${pp_all[i]}
    fi
  done

  if [ ${#pp_no_pkgs[*]} -gt 0 ] ; then
    pp=(${pp_no_pkgs[*]})
  else
    #pp=(${pp_all_pkgs[*]})
    return
  fi

  if [ ${#pp[*]} -gt 1 ] ; then
     iRE_findLatestFile PrePARE ${pp[*]}
  else
     PrePARE=${pp[0]}
  fi

  # does PrePARE work?
  export UVCDAT_ANONYMOUS_LOG=no
  $PrePARE -h &> /dev/null

  if [ $? -gt 1 ] ; then
    # no
    PrePARE=
  fi

  return
}

iRE_findQA()
{
  local cqp=${CONDA_PATH%/bin/conda}/envs/qa-dkrz

  if [ -d ${cqp} ] ; then
    CONDA_QA_ENV=$cqp
  fi

  return
}

iRE_inqState()
{
  upCount=0

  local i name rname reqCount value
  declare -a name rname value
  declare -i reqCount=0

  # First char of names indicate whether optional (-) or required (+),
  # second by + indicates required and must exist;
  # as to must-have names working also in case of a non-update option (default)
  # Note that only one of QA_TABLES or QA_HOME has to exist.
  rname=(
         -INTERNET \
         -NEXT_QA_UPDATE \
         +QA_TABLES \
         -UPDATE \
       )

  # extend for CONDA installation
  if [ ${CONDA_PATH} ] ; then
     rname[${#rname[*]}]=-CONDA_PATH
  fi

  # extend for current projects
  for(( i=0 ; i < ${#prj[*]} ; ++i )) ; do
    rname[${#rname[*]}]=-NEXT_${prj[i]}_UPDATE

    if [ ${prj[i]} = CMIP6 ] ; then
      isCMIP6=t

      rname[${#rname[*]}]=+PrePARE
#     rname[${#rname[*]}]=+UDUNITS2_XML_PATH
      #rname[${#rname[*]}]=+CONDA_CMOR_ENV
    rname[${#rname[*]}]=+XLSX2CSV
    fi
  done

  # count mandatory names and convert to plain requirements and names, respectively
  local pos
  for(( i=0 ; i < ${#rname[*]} ; ++i )) ; do
    test ${rname[i]:0:1} = '+' && reqCount+=1
    pos=1
    test ${rname[i]:1:1} = '+' && pos=2
    name[i]=${rname[i]:pos}
    rname[i]=${rname[i]:0:pos}
  done

  # read configuration setting
  iRE_readConfigFile

  iRE_checkForUpdate

  test ${upCount} -eq 0 && iRE_checkTables $*

  test ${isRO:-f} = t -o ${upCount} = 0 && return ${upCount}

  iRE_scanCondaEnv qa-dkrz
  iRE_scanCondaEnv PrePARE
#   iRE_scanCondaEnv udunits2.xml

  return
}

iRE_readConfigFile()
{
  for(( i=0 ; i < ${#name[*]} ; ++i )) ; do
    if . ${QA_SRC}/scripts/parseConfigFile ${name[i]} --inquire ; then
       value[i]=${!name[i]}

       if [ ${rname[i]:0:1} = '+' -a ${#value[i]} -eq 0 ] ; then
          echo "missing feature: ${name[i]}"
       else
          eval export ${name[i]}=${value[i]}
       fi
    fi
  done

  return
}

iRE_scanCondaEnv()
{
  local f ix env envs ix_custom ix_env ix_root
  local path paths path_env path_custom path_root env_custom env_env env_root
  local conda_path # could be different for cmor
  declare -a envs paths

  if [ $1 = qa-dkrz ] ; then
    test ! ${CONDA_PATH} && return  # not installed by conda

    if [ ${CONDA_QA_ENV} ] ; then
       return
    else
       if ! . ${QA_SRC}/scripts/parseConfigFile CONDA_QA_ENV ; then
          iRE_findQA
       fi
    fi
  fi

  if [ $1 = PrePARE ] ; then
    # test ! ${isCMIP6} && return

    # try to restore some lost config-file items
    if [ ! ${PrePARE} ] ; then
      iRE_findLatestPrePARE
    fi
  fi

  if [ $1 = qa-dkrz ] ; then
     . ${QA_SRC}/scripts/parseConfigFile CONDA_QA_ENV=${CONDA_QA_ENV}

     test ${CONDA_PATH} && \
        . ${QA_SRC}/scripts/parseConfigFile CONDA_PATH=${CONDA_PATH}
  elif [ $1 = PrePARE -a ${#PrePARE} -gt 0 ] ; then
     #test ${CONDA_CMOR_ENV} && \
     #. ${QA_SRC}/scripts/parseConfigFile CONDA_CMOR_ENV=${CONDA_CMOR_ENV}

     . ${QA_SRC}/scripts/parseConfigFile PrePARE=${PrePARE}
     . ${QA_SRC}/scripts/parseConfigFile CONDA_CMOR_ENV=${PrePARE%/bin/PrePARE}
  fi

  return
}

iRE_inqRunEnv()
{
  local isRO
  local isUp

  local prj
  declare -a prj

  local arg
  for arg in $* ; do
    if [ ${arg} = '--read-only' ] ; then
      isRO=t
    else
      prj[${#prj[*]}]=$arg
    fi
  done

  iRE_inqState ${prj[*]}

  if [ ! ${isRO} ] ; then
    for pprj in ${prj[*]} ; do
      if [ ${pprj} != CMIP6 ] ; then
        continue
      fi

      iRE_CMIP6
    done
  fi

  return $upCount
}

# main

if [ ${1%%=*} = funct ] ; then
  # run a function
  funct=${1#*=}
  shift 1

  ${funct=} $*
  return $?
fi

iRE_inqRunEnv $*

return $?
