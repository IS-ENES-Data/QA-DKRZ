check_config_()
{
  local retVal=0

  local arg args isForce p opts
  declare -a args
  local setCF=CF

  check_config_general

  for arg in $* ; do
     if [ ${arg} = '--force' ] ; then
        isForce=t
     elif [ ${arg:0:4} = '--up' -o ${arg:0:4} = '--UP' ] ; then
        opts="${arg}"
     else
        args+=( "$arg" )
        test ${arg} = CF && setCF=
     fi
  done

  test ! -w $QA_SRC && opts="${opts} --no-w-perm"

  for p in $setCF ${args[*]} ; do  # usually a single one
     # no external sources
     # test $p = HAPPI && check_config_HAPPI ${opts}
     # test $p = CMIP5 && check_config_CMIP5 ${opts}

     if [ $p = CF ] ; then
         check_config_CF ${opts}
     elif [ $p = CMIP6 ] ; then
         check_config_CMIP6 ${opts}
     elif [ $p = CORDEX ] ; then
         check_config_CORDEX ${opts}
     fi

     retVal=$?
     if [ $retVal = 0 ] ; then
       local v=$( python ${QA_SRC}/python/qa-dkrz/qa_version.py -P $p )

       . ${QA_SRC}/scripts/parseConfigFile ${p}_VERSION=$v
     fi
  done

  test ${isDebug} && echo "return: check_config" > /dev/null

  return $retVal
}

check_config_general()
{
   # update for QA is checked in install

   if [ ! ${QA_TABLES} ] ; then
      . ${QA_SRC}/scripts/getTablesPath
      . $QA_SRC/scripts/parseConfigFile QA_TABLES
   fi

   if ! . $QA_SRC/scripts/parseConfigFile XLSX2CSV ; then
      isForce=t
   elif ! . $QA_SRC/scripts/parseConfigFile CONDA_PATH_CMOR ; then
      isForce=t
   elif ! . $QA_SRC/scripts/parseConfigFile CONDA_CMOR_ENV ; then
      isForce=t
   elif ! . $QA_SRC/scripts/parseConfigFile PrePARE ; then
      isForce=t
#   elif ! . $QA_SRC/scripts/parseConfigFile UDUNITS2_XML_PATH ; then
#      isForce=t
   fi

   test ${isDebug} && echo "return: check_config_general" > /dev/null
   return
}

check_config_CF()
{
   local retVal
   local prj=CF

   . ${QA_SRC}/scripts/get_externalSources \
         -P $prj --qa-src=${QA_SRC} ${isForce:+--force} \
         --qa-tables=${QA_TABLES} --config_file=${CONFIG_FILE} $*

   retVal=$?
   test ${isDebug} && echo "return: check_config_CF" > /dev/null

   return $retVal
}

check_config_CMIP5()
{
   local prj=CMIP5

   # provided by QA_TABLES
   return 1
}

check_config_CMIP6()
{
   local retVal
   local prj=CMIP6

   . ${QA_SRC}/scripts/get_externalSources \
         -P $prj --qa-src=${QA_SRC} ${isForce:+--force} \
         --qa-tables=${QA_TABLES} --config_file=${CONFIG_FILE} $*

   retVal=$?
   test ${isDebug} && echo "return: check_config_CMIP6" > /dev/null

   return $retVal
}

check_config_CORDEX()
{
   local retVal
   local prj=CORDEX

   . ${QA_SRC}/scripts/get_externalSources \
         -P $prj --qa-src=${QA_SRC}  ${isForce:+--force} \
         --qa-tables=${QA_TABLES} --config_file=${CONFIG_FILE} $*

   retVal=$?
   test ${isDebug} && echo "return: check_config_CORDEX" > /dev/null

   return $retVal
}

check_config_HAPPI()
{
   # provided in QA_TABLES
   return 1
}

# main
# here, only undefined config assignments are resolved.

test ! ${NET} && return 0

check_config_ $*

test ${isDebug} && echo "return: check_configuration" > /dev/null
