descript()
{
  local com localDev text

  if [ -c "${TTY}" ] ; then
    # output to a terminal
    com=cat
    localDev="> $TTY"
  else
    # EMail
    if [ ${#EMAIL_TO[*]} -gt 0 ] ; then
      if which mail &> /dev/null ; then
        com="mail -s $sendSubject ${EMAIL_TO[*]}"
      elif which mailx &> /dev/null ; then
        com="mailx -s $sendSubject ${EMAIL_TO[*]}"
      fi
    elif [ ${SESSION_LOGDIR}  ] ; then
       # session log-file
       com=cat
       localDev='>> $SESSION_LOGDIR/session.log'
    elif [ ${QA_SRC} ] ; then
      # NoDevice
      local str0
      str0="undeliv_$( date +'%FT%T' )_${HOSTNAME%%.*}".txt
      if mkdir -p $QA_SRC/NoDevice &> /dev/null ; then
        com=cat
        localDev='>> ${QA_SRC}/NoDevice/$str0'
      fi
    fi
  fi

  # provide text for -E_ enabled option description
  local enableOptText
  displayComLineOptions # text appended below


  eval $com $localDev <<!
$sendText

Usage: qa-DKRZ options

  Quality Assurance of file system based ${PROJECT} experiments.

  QA for file system (FS) based data of climatological experiments
  contained in netCDF files.
  The QA builds directories for storage of check-log files, session
  annotations and time series (netCDF) of QA specific data. The
  latter is given in a directory tree similar to the one of the original
  data, i.e. arranged for variables and the corresponding frequency.
  The logfiles for checked experiments are stored within directory
  'check_logs', which contain sub-dirs _Notes and _Periods for
  annotations of failed checks and checked time-range, respectively.
  Please, have a look at QA-DKRZ/doc/qa-user-manual.pdf for more details.

  A run is usually started by executing:
     path/QA-DKRZ/scripts/qa-DKRZ options
  where options contain usually -c 'file' and/or -f 'file' for
  one or two configuration files.
  A configuration file with processing directives may contain a link
  to another configuration file with lower priority; there is no
  maximal nesting depth.

  Assignments on the command-line may overwrite those of
  the configuration file. However, most of command-line options
  are for short-term purposes (debugging, displaying status etc.).
  Usage of configuration file(s) is recommended.
  Each configuration assignment may be given on the command-line, but
  prefixed by '-E_'.

  Regular Expressions are permitted as applicable to the 'expr' command.
  Definition: A list is comma-separated in a single string.

  Usually key-words will be given only once, but are overruled
  corresponding to the priority of configuration files; but
  assignments could be appended by '+='.

  Assignments ot key words SELECT and LOCK exhibit identical,
  but specific behaviour. The assignment character '=' is replaced
  by a space. However, continuation of assignments (appending) is
  done with '+=*. SELECT and LOCK, respectively, may be substituted
  by -S and -L on the command-line.
  Syntax: [path1[,path2,...]]=[var1[,var2,...]]
  Examples ('path' denotes a sub-path continuing the
  one in PROJECT/DATA, 'var' inidcates a starting sub-string for
  file names [e.g. tas_.*day]):
  1) path=var
     specifies a path where to look for a single variable; the path
     may fork to and continue with several sub-paths (e.g. for frequencies).
  2) p1,p2=var
     two paths to look for a variable.
  3) a) p1=
     b) p1,p2=
     one and two paths, respectively, with every variable;
     equivalent to p1,p2=.*
  4) p1=v1,v2
     one path [in the sense of 1)] with two variables.
  5) var[,v2,v3]
     specified variables in every path.
  6) p1=,p2=v1...  --> This is an ERROR.
  7) no '=' character
     a) not a path: variable(s) in all sub-paths prolonging the one
        in PROJECT_DATA, equivalent to '.*', e.g.
        by -S var on the command-line.
     b) contains at least a single '/' character; this is
        equivalent to 3a).

  But, if you want to make a run only for a specific variable
  or a group of entries using Regular Expression, then using
  the command-line is reasonable. Also some features are only
  enabled via the command-line, e.g. -E_DEBUG_... .

  Options:
   -E_OPT[=val]    Enable where OPT indicates a configuration directive.
             A key-word without assignments is a boolean switches set True.
             E_OPT is case-insensitiv. Detailed description is given in file
             QA-DKRZ/example/CORDEX_qa.conf; '_' may be replaced by a blank
             or omitted at all.
   -f name   Read configuration.
             Note: one configuration file may contain frequently
             modified assignments while the other hold all time
             assignments. If a name without leading path component
             is not available locally, then QA-DKRZ/tables is searched.
             Note: files for -c and -f are arbitrarily convertible.
   -h/--help This description.
   -L        Locking of paths and variables
   -m        Display a status line below the command-line call.
   -P        Project name (usually PROJECT= in a config-file).
   -S        Selection of paths and variables (see config-file).
   -v        Brief version; use --version=v[erbose] for more details.
   -x        Equivalent to -E_DEBUG_C -E_DEBUG_E -E_DEBUG_M.
   --auto-up[=disable]
             Permanently enable/disable automatic updates [default: disable].
             Disable a previously enabled option: --auto-up=d[isable].
   --conda-update  Update the qa-dkrz package by conda.
   --config-file-location[=path]
             The user's HOME directory by default; abbreviation --lcf.
   --debug   Show bash execution commands of install, qa-config, qa-dkrz, qa-dkrz
   --example Run the example.
   --force-update
             Update tables; by default this is done during the first run of
             the current day.
   --ignore_failed_update
   --install[=PROJECT-name]
             Use qa-dkrz call as a wrapper to the install script and then exit.
             Project-name is only used for compiling the C++ programs; may be omitted
             when a PROJECT or a PROJECT_AS name is specified.
   --lcf     --config-file-location
   --no-internet   Usage in off-line mode.
   --pb[=filename[,step]]
             Progress bar properties. (obsolete)
             Output of number of processed data files and total number of data files;
             if a filename is not provided, then to stdout. Note that stdout should be
             redirected if option -m is also active. The step defines the stepping rate
             of the output in terms of percentage; 1% by default.
             Note that a filename must contain at least a single alpha char and
             that the step must not ... .
   --project_as=string
             The current PROJECT is treated as PROJECT_AS=string, but with
             the name kept.
   --set-default-project=PROJECT
             If the installation is done from GitHub, then the command QA-DKRZ/install
             without assignment of a project name, then the binary is compiled
             for CORDEX. This option changes the default permanently .
             Not for the installation by conda.
   --version[=v[verbose]]
             Display versions of qa-dkrz and used external tables and programs,
             which are defined in ${QA_TABLES:-QA_TABLES}.
   --work    Location of check results. Usually set by option QA_RESULTS.
             However for running the example, then also the HOME for .qa-dkrz
             and tables.

             Note that the script QA-DKRZ/install provides some more build-specific
             options (only for installation from GitHub).

${enableOptText}
!
  return
}

displayComLineOptions()
{
      enableOptText="\

      Additional options usually enabled on the command-line. Detailed description
      in the configuration file PROJECT_QA.conf:
      CHECK_TOOLS           Check and show availability of tools and exit.
      CLEAR[=arg]           Clear previous annotations
      DEBUG_C[ONFIGURATOR]  Log qaConfiguration processing to stderr.
      DEBUG_E[XECUTOR]      Log qaExecutor processing to files corresponding to
                            variable names (where qa-DKRZ was started).
      DEBUG_M[ANAGER]       Execution log of the qa-DKRZ to stderr.
      DEBUG_X[=script]      Enable debugging of external script; default all.
      FLOW_TRACE            Flow trace analysis of the qa-DKRZ main-loop.
                            Note that specific commenting-in is required.
      NEXT[=num]            Process the next num variables.
      NO_SUMMARY            Cancel summary
      ONLY_SUMMARY          Post-processed by default when ever a check
                            was performed (usually not necessary, because
                            this is performed at the end of a run).
      PY_SUMMARY            New python based summary.
      SHOW_CALL             Show the qA_main.x call; no execution.
      SHOW_CLEAR[=arg]      Show SELECTed file names scheduled for clearing annotations.
      SHOW_CONF             Show configuration and exit.
      SHOW_EXP              Show paths of SELECTed variables and log-file name.
      SHOW_LOG_FNAME        SHow log-file names corresponding to SELECTed variables.
      SHOW_NEXT[=num}       Show num next scheduled variables and paths.
      TRADITIONAL_SUMMARY   Former bash-based summary.
      REFRESH_CF_STANDARD   wget original sources from PCMDI into QA-DKRZ/tables.
      REUSE_PATH_LIST       Use a path-list left previously for a resumed session.
"

  test $# -eq 0 && return

  if [ -c "$TTY" ] ; then
    echo '' > $TTY
    cat > $TTY <<!
$enableOptText
!
  fi

  return
}

descript
exit 1
