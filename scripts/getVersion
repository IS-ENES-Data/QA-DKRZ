#! /bin/bash

descript()
{
  echo " -h, --help"
  echo " -v            Verbose on multiple lines"
  echo " --debug"
  echo " --get-branch  Get the current git branch"
  echo " --qa-tables   Path to the tables"
  echo " --verbose     Verbose on multiple lines"
  echo " string        Currrent project"
  exit 0
}

getGitBranch()
{
   test ! -d $1/.git && return

   #git -C $1 branch | grep '*' | awk '{print $2}'
   cd $1 &> /dev/null

   if which git &> /dev/null ; then
     # produces output
     branch=$( git branch | grep '*' | awk '{print $2}')
     currIdent=$(git log --pretty=format:'%h' -n 1)
   fi

   cd - &> /dev/null

   return
}

getFromConda()
{
   if [ ${CONDA_PATH} ] ; then
     if tmp=( $(cat ${QA_SRC}/install.log 2> /dev/null) ) ; then
       branch=${tmp[0]#*=}
       currIdent=${tmp[1]#*=}
       test ${#tmp[*]} -gt 2 && tag=${tmp[2]#*=}
     fi

     return 0
   fi

   return 1
}

getQA_Version()
{
  # get current revision number; this determines whether it is
  # before a change of defaults happened.

  if [ ! ${isForce} ] ; then
    if [[ ${#QA_VERSION} -gt 0 ]] || \
            . ${QA_SRC}/scripts/parseConfigFile QA_VERSION ; then
      local arr
      declare -a arr
      arr=( ${QA_VERSION//,/ } )
      if [ ${#arr[*]} -eq 1 ] ; then
        branch=${arr[0]%-*}
        currIdent=${arr[0]##*-}
      elif [ ${#arr[*]} -eq 2 ] ; then
        tag=${arr[0]}
        branch=${arr[1]%-*}
        currIdent=${arr[1]##*-}
      fi

      if [ ${branch} ] ; then
        totalStr="${tag}${tag:+,}${branch}-${currIdent}"
        return
      fi
    fi
  fi

  if ! getFromConda ; then
    local f=${QA_SRC}/conda-recipes/qa-dkrz/meta.yaml

    getGitBranch $QA_SRC

    tag=$( grep 'name:' $f | awk '{print $(NF)}' )
    tmp2=$( grep 'version:' $f | awk '{print $(NF)}' )
    tmp2=${tmp2:1}
    tag=${tag}-${tmp2:0:$((${#tmp2}-1))}
    tmp2=$( grep 'number:' $f | awk '{print $(NF)}' )
    tag=${tag}-${tmp2}
  fi

  QA_VERSION="${tag}${tag:+,}${branch}-${currIdent}"
  if . ${QA_SRC}/scripts/parseConfigFile QA_VERSION=${QA_VERSION} ; then
    isUpdate=1
  fi

  if [ ${isVerbose} ] ; then
    vStr="QA version:"
    vStr="${vStr}\n   branch: ${branch}"
    vStr="${vStr}\n   commit-SHA: ${currIdent}"
    vStr="${vStr}\n   tag: ${tag:- -}"
  else
   vStr="${QA_VERSION}"
  fi

  return
}

getExternalVersion()
{
  local prjs
  declare -a prjs

  test ${prj} != CF && prjs[0]=CF
  prjs[${#prjs[*]}]=${prj}

  if [ ${isVerbose} ] ; then
    sep0='\n'
    sep1='\n   '
  else
    sep0='|'
  fi

  local p_base=${QA_TABLES}/tables/projects
  local branch currIdent

  for prj in ${prjs[*]} ; do
    if [ ${prj} = CMIP6 ] ; then
       if [ ! ${isForce} ] ; then
         if [[ ${#CMIP6_VERSION} -gt 0 ]] || \
            . ${QA_SRC}/scripts/parseConfigFile CMIP6_VERSION ; then
            totalStr="${totalStr}${sep0}${CMIP6_VERSION}"
            continue
         fi
       fi

       getGitBranch $p_base/CMIP6/CMIP6_CVs

       #git -C ${QA_TABLES}/CMIP6/CMIP6_CVs log --oneline --decorate\
       vStr="CMIP6_CVs:${sep1}"
       vStr="${vStr}${branch}-${currIdent}"

       vStr="${vStr}${sep0}CMIP6_MIP_tables.xlsx:${sep1}"
       vStr="${vStr}"$(ls -l --time-style='+%FT%T' \
                   $p_base/CMIP6/CMIP6_MIP_tables.xlsx \
                   | awk '{print $6}')

       if [ ! ${PrePARE} ] ; then
          if ! Prepare=$( ${QA_SRC}/scripts/which_cmd_alias -q PrePARE ) ; then
               . ${QA_SRC}/scripts/parseConfigFile PrePARE
            fi
       fi

       if [ ${PrePARE} ] ; then
           i=$(ls ${PrePARE%/bin/PrePARE}/conda-meta/cmor-* 2> /dev/null)
           i=${i##*/}
           vStr="${vStr}${sep0}CMOR:${sep1}${i%.json}"

           getGitBranch $p_base/CMIP6/cmip6-cmor-tables

           #git -C ${QA_TABLES}/CMIP6/CMIP6_CVs log --oneline --decorate\
           vStr="${vStr}${sep0}cmip6-cmor-tables:${sep1}${branch}-${currIdent}"
           if . ${QA_SRC}/scripts/parseConfigFile CMIP6_VERSION=${vStr} ; then
              isUpdate=1
           fi
       fi

       totalStr="${totalStr}${sep0}${vStr}"

    elif [ ${prj} = CORDEX ] ; then
       if [ ! ${isForce} ] ; then
         if [[ ${#CORDEX_VERSION} -gt 0 ]] || \
            . ${QA_SRC}/scripts/parseConfigFile CORDEX_VERSION ; then
            totalStr=${totalStr}${sep0}${CORDEX_VERSION}
            continue
         fi
       fi

       getGitBranch $QA_SRC/CORDEX/IS-ENES-Data.github.io

       vStr="IS-ENES-Data.github.io:${sep1}"
       vStr="${vStr}${branch}-${currIdent}"
       totalStr="${totalStr}${sep0}${vStr}"

       if . ${QA_SRC}/scripts/parseConfigFile CORDEX_VERSION=${vStr} ; then
          isUpdate=1
       fi
    elif [ ${prj} = CF ] ; then
       if [ ! ${isForce} ] ; then
         if [[ ${#CF_VERSION} -gt 0 ]] || \
            . ${QA_SRC}/scripts/parseConfigFile CF_VERSION ; then
            totalStr=${totalStr}${sep0}${CF_VERSION}
            continue
         fi
       fi

       if [ ${CF_STD_NAME} ] ; then
         vStr="CF_STD_NAME:${sep1}${CF_STD_NAME}"
       elif [ -f $p_base/CF/standard-names.html ] ; then
         local vd
         vd="$(grep 'Standard Name Table (.*)' $p_base/CF/standard-names.html)"
         vd="${vd#*(}"
         vd="${vd%)*}"
         vd="${vd// /}"
         vStr="CF_STD_NAME:${sep1}"
         vStr="${vStr}${vd}"
       fi
       totalStr="${totalStr}${sep0}${vStr}"

       if . ${QA_SRC}/scripts/parseConfigFile CF_VERSION=${vStr} ; then
         isUpdate=1
       fi
    fi
  done

  return
}

getCondaPath()
{
  if [ ${CONDA_PATH} ] ; then
    return
  else
    if . $QA_SRC/scripts/parseConfigFile CONDA_PATH ] ; then
      export CONDA_PATH
      return
    fi

  fi

  # no conda in PATH;
  # was this script launched from qa-dkrz of a conda installation?
  # look for bin/conda in QA_SRC
  local path=$QA_SRC

  local i pth pc sz dirs dir
  declare -a pc dirs

  pc=( ${path//\// } )
  sz=$(( ${#pc[*]} -2 ))

  for(( i=0; i < sz ; ++i )) ; do
    pth="${pth}/${pc[i]}"

    if [ -f ${pth}/bin/conda ] ; then
       pth="${pth}/bin/conda"
       break
    fi
  done

  if [ ${i} -lt ${sz} ] ; then
     export CONDA_PATH="${pth}"
     . $QA_SRC/scripts/parseConfigFile CONDA_PATH=${CONDA_PATH}
  fi

  # CONDA_PATH could be empty, if conda is neither referenced
  # by PATH nor by alias.

  return
}

getSrcPath()
{
   local p
   p=$0

   if [ ! -h ${p%/getVersion} ] ; then
     if [ ${p:0:1} = '/' ] ; then
       QA_SRC=${0%/getVersion}
       QA_SRC=${QA_SRC%/scripts}
     fi
   fi

   local i items p
   declare -a items

   while [ -h $p ] ; do
      # resolve symbolic links: cumbersome but robust,
      items=( $(ls -l $p) )
      i=$((${#items[*]}-1))
      p=${items[i]}
   done

   # only the directory
   p=${p%/*}

   # resolve relative path
   if [ ${p:0:1} != '/' ] ; then
     cd $p &> /dev/null
     p=$(pwd)
     cd - &> /dev/null
   fi

   QA_SRC=$p
   test ${QA_SRC##*/} = scripts && QA_SRC=${QA_SRC%/scripts}

   return
}


# --- main ---

getSrcPath
getCondaPath

while getopts h:v-: option
do
  case $option in
    h)  descript ;;
    v)  isVerbose=t ;;
    -) if [ ${OPTARG%=*} == 'config-file' ] ; then
         CONFIG_FILE=${OPTARG#*=}
       elif [ ${OPTARG} = "debug" ] ; then
         set -x
       elif [ ${OPTARG} == 'get-branch' ] ; then
         getGitBranch ${QA_SRC}
         echo $branch
         exit 0
       elif [ ${OPTARG} == 'force' ] ; then
         isForce=t
       elif [ ${OPTARG} == 'help' ] ; then
         descript
       elif [ ${OPTARG:0:7} == 'only-pr' ] ; then
         isOnlyPRJ=t
       elif [ ${OPTARG%=*} == 'qa-tables' -o ${OPTARG%=*} == 'qa-home' ] ; then
         QA_TABLES=${OPTARG#*=}
       elif [ ${OPTARG} == 'verbose' ] ; then
         isVerbose=t
       fi
       ;;
   \?) echo "getVersion: undefined option $option"
       exit 41 ;;
  esac
done

shift $(( $OPTIND - 1 ))

isUpdate=0  # nothing changed

test $# -gt 0 && prj=$1

test ! ${isOnlyPRJ} && getQA_Version
test ${prj} && getExternalVersion

# print
if [ ${isVerbose} ] ; then
  echo -e "${totalStr}"
else
  echo -n "${totalStr}"
fi

exit ${isUpdate}
